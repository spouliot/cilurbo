using System.Reflection.Metadata.Ecma335;

using ICSharpCode.Decompiler.Metadata;
using Terminal.Gui;

namespace Cilurbo.MetadataTables;

class MetadataTableView : ExportableTableView {

	public MetadataTableView ()
	{
		Width = Dim.Fill ();
		Height = Dim.Fill ();
		MultiSelect = false;
		FullRowSelect = true;
		Style.AlwaysShowHeaders = true;
	}

	protected override void ExportMarkdown (TextWriter writer)
	{
		if (Table.ExtendedProperties ["PE"] is PEFile pe) {
			var tableName = Table.ExtendedProperties ["Metadata"] as string;
			Title = $"{pe.Name} - {tableName}";
			writer.WriteLine ($"# {Title}");
			writer.WriteLine ();
			writer.WriteLine ($"Assembly: {pe.FullName}");
			writer.WriteLine ();
			writer.WriteLine ($"Location: {pe.FileName}");
			writer.WriteLine ();
			base.ExportMarkdown (writer);
			writer.WriteLine ();
			writer.WriteLine ("Generated by [Cilurbo](https://github.com/spouliot/cilurbo)");
		}
	}

	protected override void OnCellActivated (CellActivatedEventArgs args)
	{
		switch (Table.ExtendedProperties ["Metadata"]) {
		case MetadataTable.AssemblyRef:
			if (Table.ExtendedProperties ["PE"] is not PEFile pe)
				break;
			var handle = MetadataTokens.AssemblyReferenceHandle ((int) Table.Rows [args.Row] [0]);
			AssemblyReference ar = new (pe.Metadata, handle);
			var a = AssemblyResolver.Resolver.Resolve (ar);
			if (a is not null) {
				var an = Program.Select ((n) => a.Equals (n.Tag) && (n is AssemblyNode));
				if (an is null) {
					an = Program.Add (a, selectAndGoto: true);
				}
			}
			Program.EnsureSourceView ().Show (a);
			break;
		}
	}
}
